Key Terms

    Bubble sort -poor
        Keep looping through an array to find out whether adjascent values to be swapped. Go until no need.
        Run bubble sort it compares adjascent values.
        If it ran at least one swap then array has changed. 
        O(n) to O(n^2)
    Merge sort
        breaks arrat down to smaller chunks, merges them back in correct order
        O(nlog(n)) for all (requires additional memory allocation.)
    Quicksort O(nlog(n)) for best and average O(n^2) for worst case
        most commonly used. Easiest to do in place, best cache and does not require additional memory allocation.
        Quicksort again uses a divide and conquer approach. 
        You partition the array into 2 halves around a pivot value. 
        All of the values which are less than the pivot value go to 1 half of the array, 
        and all of the values which are greater than the pivot go to the other half of the array. 
        You then recursively sort the 2 halves of the array until the halves are of length 0 or 1.

function swap(array, i, j) {
    const tmp = array[i];
    array[i] = array[j];
    array[j] = tmp;
};

function bubbleSort(array) {
    let swaps = 0;
    for (let i = 0; i < array.length - 1; i++) {
        if (array[i] > array[i + 1]) {
            swap(array, i, i + 1);
            swaps++;
        }
    }
    //recursive portion call it on the new array
    if (swaps > 0) {
        return bubbleSort(array);
    }
    //base case
    return array;
};

function mergeSort(array) {
    if (array.length <= 1) {
        return array;
    }

    const middle = Math.floor(array.length / 2);
    let left = array.slice(0, middle);
    let right = array.slice(middle, array.length);

    left = mergeSort(left);
    right = mergeSort(right);
    return merge(left, right, array);
};


O(nlog(n))
function mergeSort(array) {
    if (array.length <= 1) {
        return array;
    }

    const middle = Math.floor(array.length / 2);
    let left = array.slice(0, middle);
    let right = array.slice(middle, array.length);

    left = mergeSort(left);
    right = mergeSort(right);
    return merge(left, right, array);
};

function merge(left, right, array) {
    let leftIndex = 0;
    let rightIndex = 0;
    let outputIndex = 0;
    while (leftIndex < left.length && rightIndex < right.length) {
        if (left[leftIndex] < right[rightIndex]) {
            array[outputIndex++] = left[leftIndex++];
        }
        else {
            array[outputIndex++] = right[rightIndex++];
        }
    }

    for (let i = leftIndex; i < left.length; i++) {
        array[outputIndex++] = left[i];
    }

    for (let i = rightIndex; i < right.length; i++) {
        array[outputIndex++] = right[i];
    }
    return array;
};

[128, 97, 121, 123, 98, 97, 105]

[128, 97, 121, 123] - [98,97,105]

[128,97] -- [121,123]       [98,97] -[105]

[128]-[97]      [121]-[123]    [98]-[97]   [105] 

Sorting
[97,127] -[121,123]    [97,98] -[105]
[97,121,123,127]- [97,98,105]
[97,97,98,105,121,123,127]


function quickSort(array, start = 0, end = array.length) {
    if (start >= end) {
        return array;
    }
    const middle = partition(array, start, end);
    array = quickSort(array, start, middle);
    array = quickSort(array, middle + 1, end);
    return array;
};

function partition(array, start, end) {
    const pivot = array[end - 1];
    let j = start;
    for (let i = start; i < end - 1; i++) {
        if (array[i] <= pivot) {
            swap(array, i, j);
            j++;
        }
    }
    swap(array, end-1, j);
    return j;
};